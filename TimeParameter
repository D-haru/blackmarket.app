import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_timer.dart';
import '/flutter_flow/flutter_flow_util.dart';
import 'package:stop_watch_timer/stop_watch_timer.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

import 'timerparameter_model.dart';
export 'timerparameter_model.dart';

class TimerparameterWidget extends StatefulWidget {
  const TimerparameterWidget({
    super.key,
    this.auctiontime,
  });

  final int? auctiontime;

  @override
  State<TimerparameterWidget> createState() => _TimerparameterWidgetState();
}

class _TimerparameterWidgetState extends State<TimerparameterWidget> {
  late TimerparameterModel _model;

  @override
  void setState(VoidCallback callback) {
    super.setState(callback);
    _model.onUpdate();
  }

  @override
  void initState() {
    super.initState();
    _model = createModel(context, () => TimerparameterModel());

    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
  }

  @override
  void dispose() {
    _model.maybeDispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.max,
      children: [
        Icon(
          Icons.timer_outlined,
          color: FlutterFlowTheme.of(context).secondaryText,
          size: 30,
        ),
        FlutterFlowTimer(
          initialTime: _model.timerInitialTimeMs,
          getDisplayTime: (value) =>
              StopWatchTimer.getDisplayTime(value, milliSecond: false),
          controller: _model.timerController,
          updateStateInterval: Duration(milliseconds: 1000),
          onChanged: (value, displayTime, shouldUpdate) {
            _model.timerMilliseconds = value;
            _model.timerValue = displayTime;
            if (shouldUpdate) setState(() {});
          },
          textAlign: TextAlign.start,
          style: FlutterFlowTheme.of(context).headlineSmall.override(
                fontFamily: 'Outfit',
                letterSpacing: 0,
                fontWeight: FontWeight.bold,
              ),
        ),
      ],
    );
  }
}
