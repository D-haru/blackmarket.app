import '/flutter_flow/flutter_flow_animations.dart';
import '/flutter_flow/flutter_flow_choice_chips.dart';
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/flutter_flow/form_field_controller.dart';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:provider/provider.dart';

import 'auctiontime2_model.dart';
export 'auctiontime2_model.dart';

class Auctiontime2Widget extends StatefulWidget {
  const Auctiontime2Widget({
    super.key,
    this.auctiontime,
  });

  final List<String>? auctiontime;

  @override
  State<Auctiontime2Widget> createState() => _Auctiontime2WidgetState();
}

class _Auctiontime2WidgetState extends State<Auctiontime2Widget>
    with TickerProviderStateMixin {
  late Auctiontime2Model _model;

  final animationsMap = <String, AnimationInfo>{};

  @override
  void setState(VoidCallback callback) {
    super.setState(callback);
    _model.onUpdate();
  }

  @override
  void initState() {
    super.initState();
    _model = createModel(context, () => Auctiontime2Model());

    // On component load action.
    SchedulerBinding.instance.addPostFrameCallback((_) async {
      final _datePickedDate = await showDatePicker(
        context: context,
        initialDate: getCurrentTimestamp,
        firstDate: getCurrentTimestamp,
        lastDate: DateTime(2050),
      );

      if (_datePickedDate != null) {
        safeSetState(() {
          _model.datePicked = DateTime(
            _datePickedDate.year,
            _datePickedDate.month,
            _datePickedDate.day,
          );
        });
      }
    });

    animationsMap.addAll({
      'choiceChipsOnPageLoadAnimation': AnimationInfo(
        trigger: AnimationTrigger.onPageLoad,
        effectsBuilder: () => [
          VisibilityEffect(duration: 1.ms),
          FadeEffect(
            curve: Curves.linear,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: 0.0,
            end: 1.0,
          ),
          MoveEffect(
            curve: Curves.linear,
            delay: 0.0.ms,
            duration: 600.0.ms,
            begin: Offset(100.0, 0.0),
            end: Offset(0.0, 0.0),
          ),
        ],
      ),
    });
  }

  @override
  void dispose() {
    _model.maybeDispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FlutterFlowChoiceChips(
      options: [ChipData('3일'), ChipData('5일'), ChipData('7일')],
      onChanged: (val) =>
          setState(() => _model.choiceChipsValue = val?.firstOrNull),
      selectedChipStyle: ChipStyle(
        backgroundColor: Color(0xFF09201C),
        textStyle: FlutterFlowTheme.of(context).bodyMedium.override(
              fontFamily: 'Readex Pro',
              color: FlutterFlowTheme.of(context).primaryText,
              letterSpacing: 0,
            ),
        iconColor: Color(0x7DADB8C5),
        iconSize: 18,
        elevation: 4,
        borderRadius: BorderRadius.circular(16),
      ),
      unselectedChipStyle: ChipStyle(
        backgroundColor: Color(0xFF09201C),
        textStyle: FlutterFlowTheme.of(context).bodyMedium.override(
              fontFamily: 'Readex Pro',
              color: FlutterFlowTheme.of(context).secondaryText,
              letterSpacing: 0,
            ),
        iconColor: Color(0x7DADB8C5),
        iconSize: 18,
        elevation: 4,
        borderRadius: BorderRadius.circular(16),
      ),
      chipSpacing: 40,
      rowSpacing: 12,
      multiselect: false,
      alignment: WrapAlignment.start,
      controller: _model.choiceChipsValueController ??=
          FormFieldController<List<String>>(
        [],
      ),
      wrapped: true,
    ).animateOnPageLoad(animationsMap['choiceChipsOnPageLoadAnimation']!);
  }
}
